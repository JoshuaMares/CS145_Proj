# -*- coding: utf-8 -*-
"""Model_Train_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ll2FyicEdjPej3LwMYJ6dcFZYrkl02Ku
"""

import random
import numpy as np

"""## katchi code"""

import pandas as pd
from sklearn.model_selection import train_test_split
from transformers import DebertaTokenizer, DebertaForSequenceClassification, Trainer, TrainingArguments
import torch

# load data
df = pd.read_csv('final.csv')  # replace with your csv file
df.info()

# Use the sample data on my local machine. Please change it when running on VM
texts = random.sample(df['info_sentence'].tolist(), 100)
labels = random.sample(df['meta'].tolist(), 100)


# Split into training and validation before converting to tensors
train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels, test_size=0.2)

# load tokenizer and model
tokenizer = DebertaTokenizer.from_pretrained('microsoft/deberta-base')

# tokenize data for training set
train_encodings = tokenizer(train_texts, truncation=True, padding=True, max_length=512, return_tensors='pt')
train_encodings['labels'] = torch.tensor(train_labels)

# tokenize data for validation set
val_encodings = tokenizer(val_texts, truncation=True, padding=True, max_length=512, return_tensors='pt')
val_encodings['labels'] = torch.tensor(val_labels)

# Convert encodings to a Dataset format
class CardInfoDataset(torch.utils.data.Dataset):
    def __init__(self, encodings):
        self.encodings = encodings

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        return item

    def __len__(self):
        return len(self.encodings['input_ids'])

!pip install transformers

from sklearn.metrics import accuracy_score

train_dataset = CardInfoDataset(train_encodings)
val_dataset = CardInfoDataset(val_encodings)

#function to compute accuracy
def compute_accuracy(preds, labels):
    preds = np.argmax(preds, axis=1)
    return accuracy_score(labels, preds)


# define the training args
training_args = TrainingArguments(
    output_dir='./results',          
    num_train_epochs=3,              
    per_device_train_batch_size=16,  
    per_device_eval_batch_size=64,   
    warmup_steps=500,                
    weight_decay=0.01,               
    logging_dir='./logs',            
)

model = DebertaForSequenceClassification.from_pretrained('microsoft/deberta-base', num_labels=len(set(labels)))

# create the trainer
trainer = Trainer(
    model=model,                         
    args=training_args,                  
    train_dataset=train_dataset,         
    eval_dataset=val_dataset,
    compute_metrics=lambda pred: {"accuracy": compute_accuracy(pred.predictions, pred.label_ids)}             
)

# train the model
trainer.train()


# save the model
model.save_pretrained("./deberta_model")

"""### Testing case"""

# ... existing code ...

# Input data for inference
input_data = ["Magician Girl", "Blue-Eyes White Dragon", "Saint Dragon - The God of Osiris"]

# Preprocess the input data
input_encodings = tokenizer(input_data, truncation=True, padding=True)

# Create a dataset for inference
inference_dataset = CardInfoDataset(input_encodings)

# Perform inference using the trained model
predictions = trainer.predict(test_dataset=inference_dataset)

# Get the predicted labels
predicted_labels = np.argmax(predictions.predictions, axis=1)

# Print the predicted labels
for input_text, label in zip(input_data, predicted_labels):
    print(f"Input: {input_text}\tPredicted Label: {label}")

!pip install --upgrade accelerate